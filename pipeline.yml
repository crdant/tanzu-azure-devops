# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  repositories:
  - repository: clusters
    name: clusters
    type: git
    ref: main
    trigger: 
      branches:
        include: 
        - main

jobs:
- job: maintain_clusters
  displayName: Maintain Kubernetes Clusters
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: clusters
  - bash: sudo snap install yq
    displayName: Install YQ command 
  - task: AzureCLI@2
    displayName: Maintain Clusters
    inputs:
      azureSubscription: clustermanagement
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        cluster_dir=$(Build.SourcesDirectory)/data
        export AZURE_DEVOPS_EXT_PAT=$(System.AccessToken) 
        # az devops login --organization $(System.CollectionUri)

        key_vault=cluster-management
        trusted_registry=crdanttrustedregistry
        storage_location=crdant-data-protection
        for cluster in $(ls ${cluster_dir}); do 
          cluster="${cluster_dir}/${cluster}"
          resource_group="$(sudo cat ${cluster} | yq r - objectMeta.group)"
          cluster_name="$(sudo cat ${cluster} | yq r - fullName.name)"
          kubernetes_version="$(sudo cat ${cluster} | yq r - spec.provisionedcluster.version)"
          location="$(sudo cat ${cluster} | yq r - spec.provisionedcluster.cloudProviderConfig.azureConfig.location)"
          az_list="$(sudo cat ${cluster} | yq -j r - spec.provisionedcluster.cloudProviderConfig.azureConfig.azList |  sed -e 's/,/ /g' -e 's/[^0-9 ]*//g')"
          ssh_key="$(sudo cat ${cluster} | yq r - spec.provisionedcluster.cloudProviderConfig.azureConfig.sshKey)"
          pod_cidr="$(sudo cat ${cluster} | yq r - spec.provisionedcluster.networkConfig.podCidr)"
          services_cidr="$(sudo cat ${cluster} | yq r - spec.provisionedcluster.networkConfig.serviceCidr)"

          echo "Kicking off cluster maintenance for cluster ${cluster_name} in resource group ${resource_group}"

          set -x
          az pipelines run --name cluster-maintenance --branch $(Build.SourceBranch) \
            --variables resourceGroup="${resource_group}" clusterName="${cluster_name}" tmcApiToken="$(tmcApiToken)" \
                        kubernetesVersion="${kubernetes_version}" location="${location}" zones="${az_list}" \
                        podCidr="${pod_cidr}" servicesCidr="${services_cidr}" sshKey="${ssh_key}" \
                        keyVault="${key_vault}" trustedRegistry="${trusted_registry}" storageLocation="${storage_location}"
          set +x

          kubernetes_version=
          location=
          az_list=
          ssh_key=
          pod_cidr=
          services_cidr=
        done