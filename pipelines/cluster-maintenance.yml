# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

stages:
- stage: provision_cluster
  displayName: Provision Cluster
  jobs:
  - job: create_cluster
    displayName: Create cluster
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: AzureCLI@2
      displayName: Create Kubernetes Cluster
      inputs:
        azureSubscription: clustermanagement
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # check whether or not the cluster exists, right now we just skip over this step if it doesn't
          if ! az aks show --resource-group $(resourceGroup) --name $(clusterName) 2>&1 1> /dev/null ; then
            echo "Creating cluster $(clusterName) in resource group $(resourceGroup)"
            
            cluster_options="--enable-managed-identity --network-plugin kubenet"
            kubernetes_version=$(kubernetesVersion)
            if [[ -n ${kubernetes_version} ]]; then
              cluster_options="${cluster_options} --kubernetes-version ${kubernetes_version}"
            fi

            location=$(location)
            if [[ -n ${location} ]]; then
              cluster_options="${cluster_options} --location ${location}"
            fi

            zones="$(zones)"
            if [[ -n ${zones} ]]; then
              cluster_options="${cluster_options} --zones ${zones}"
            fi

            pod_cidr=$(podCidr)
            if [[ -n ${pod_cidr} ]]; then
              cluster_options="${cluster_options} --pod-cidr ${pod_cidr}"
            fi

            service_cidr=$(servicesCidr)
            if [[ -n ${service} ]]; then
              cluster_options="${cluster_options} --service-cidr ${service_cidr}"
            fi

            ssh_key="$(sshKey)"
            if [[ -n "${ssh_key}" ]]; then
              echo "${ssh_key}" > key.pub
              cluster_options="${cluster_options} --ssh-key-value ./key.pub"
            fi

            az aks create --resource-group $(resourceGroup) --name $(clusterName) ${cluster_options}
          else
            echo "Cluster $(clusterName) in resource group $(resourceGroup) has already been created."
          fi

    - task: AzureCLI@2
      displayName: Store Credentials
      inputs:
        azureSubscription: clustermanagement
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroup) --name $(clusterName) --file kubeconfig
          az keyvault secret set --name $(clusterName)-kubeconfig --vault-name $(keyVault) \
            --file kubeconfig
    
  - job: connect_registry
    displayName: Connect Trusted Registry
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: create_cluster

    steps:    
    - task: AzureCLI@2
      displayName: Fetch Private Key
      inputs:
        azureSubscription: clustermanagement
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az keyvault secret show --name $(clusterName)-kubeconfig --vault-name $(keyVault) | \
            jq -r .value > kubeconfig
          az keyvault secret show --name $(clusterName)-private-key --vault-name $(keyVault) | \
            jq -r .value > key.pem

    - task: KubectlInstaller@0
      displayName: Install latest Kubernetes CLI
      inputs:
        kubectlVersion: latest

    - task: AzureCLI@2
      displayName: Configure Registry Connection
      inputs:
        azureSubscription: clustermanagement
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          clusterIdentity=$(az aks show --resource-group $(resourceGroup) --name $(clusterName) --query identityProfile.kubeletidentity.objectId --output tsv)
          registryResourceId=$(az acr show --resource-group $(resourceGroup) --name $(trustedRegistry) --query id --output tsv)
          echo "Setting up access to registry $(trustedRegistry) for cluster $(clusterName) in resource group $(resourceGroup)"
          az role assignment create --assignee-object-id ${clusterIdentity} \
            --scope ${registryResourceId} --role acrpull

- stage: attach_to_tmc
  displayName: Attach Provisioned Cluster to TMC
  jobs:
  - job: attach_cluster
    displayName: Attach Provisioned Cluster
    pool:
      vmImage: 'ubuntu-latest'

    container: 
      image: $(trustedRegistry).azurecr.io/platform.crdant.io/tanzu-automation-toolkit:latest
      endpoint: trustedregistry

    steps:
    - task: AzureCLI@2
      displayName: Fetch Credentials
      target: host
      inputs:
        azureSubscription: clustermanagement
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az keyvault secret show --name $(clusterName)-kubeconfig --vault-name $(keyVault) | \
            jq -r .value > kubeconfig

    - bash: |
        export KUBECONFIG=./kubeconfig
        tmc login --name $(resourceGroup) --no-configure
        cluster_count=$(tmc cluster list -o json --name $(clusterName) | jq -r 'if .totalCount then .totalCount else .total_count end')
        if [[ cluster_count -eq 0 ]]; then
          echo "Attaching cluster $(clusterName) to TMC in cluster group $(resourceGroup)"
          tmc cluster attach --name $(clusterName) --group $(resourceGroup)
          kubectl apply -f k8s-attach-manifest.yaml
        else
          echo "Cluster $(clusterName) is already attached to TMC"
        fi
      displayName: Attach Provisioned Cluster
      env:
        TMC_API_TOKEN: $(tmcApiToken)

- stage: add_backup
  displayName: Add TMC Data Protection to Cluster
  jobs:
  - job: create_data_protection
    displayName: Add TMC Data Protection
    pool:
      vmImage: 'ubuntu-latest'

    container: 
      image: $(trustedRegistry).azurecr.io/platform.crdant.io/tanzu-automation-toolkit:latest
      endpoint: trustedregistry

    steps:
    - task: AzureCLI@2
      displayName: Fetch Credentials
      target: host
      inputs:
        azureSubscription: clustermanagement
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az keyvault secret show --name $(clusterName)-kubeconfig --vault-name $(keyVault) | \
            jq -r .value > kubeconfig

    - bash: |
        tmc login --name $(resourceGroup) --no-configure
        if ! tmc cluster dataprotection get $(clusterName) ; then
          echo "Enabling data protection for cluster $(clusterName)"
          tmc cluster dataprotection create --cluster-name $(clusterName) --backup-location-name $(storageLocation)
        else
          echo "Data protection already enabled for cluster $(clusterName)"
        fi
      displayName: Enable TMC Data Protection
      env:
        TMC_API_TOKEN: $(tmcApiToken)
 
    - bash: |
        export KUBECONFIG=./kubeconfig
        # wait for the CRD to be available, bail out after 10 minutes
        timeout=10*120
        echo "Checking that data protection is enabled..."
        while ! kubectl get crd schedules.velero.io 2>&1 1>/dev/null ; do
          if [[ timeout -lt 0 ]]; then
            echo
            echo "Timeout waiting for data protection to be enabled"
            exit 1
          fi
          echo -n "."
          sleep 30
          ((timeout-=30)) 
        done

        if ! velero schedule get nightly ; then
          velero schedule create nightly --schedule "0 22 * * *" --storage-location $(storageLocation)
        else 
          echo "Nightly backup already configured"
        fi
      displayName: Schedule Nightly Backup
      env:
        TMC_API_TOKEN: $(tmcApiToken)
